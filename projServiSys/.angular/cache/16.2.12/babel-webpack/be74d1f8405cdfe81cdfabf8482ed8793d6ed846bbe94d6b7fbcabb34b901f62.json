{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport let FormNovaOsComponent = class FormNovaOsComponent {\n  constructor(http, modalSS, apiService) {\n    this.http = http;\n    this.modalSS = modalSS;\n    this.apiService = apiService;\n    this.modalSwitch = false;\n    this.formulario = {};\n    this.id = 0;\n    this.dataOrdemServico = new Date();\n    this.descricaoProblema = '';\n    this.aprovada = false;\n    this.localEquipamento = '';\n    this.tipoEquipamento = '';\n    this.serialEquipamento = '';\n    this.userId = 0;\n    //ordens  : Ordem[] = []\n    this.ordens = new Observable();\n    // console.log('TO AQUI', environment.api)\n    this.obterOrdensCadastradas();\n  }\n  ngOnInit() {\n    // executando observable\n    this.modalSS.$modal.subscribe(valor => {\n      this.modalSwitch = valor;\n    });\n  }\n  openModal() {\n    this.modalSwitch = true;\n  }\n  obterOrdensCadastradas() {\n    // this.apiService.obterOrdem().\n    // subscribe(ordens => this.ordens = ordens)\n    /*this.http.get('https://localhost:5001/api/ordens').subscribe(\n      response => this.ordem = response,\n      error => console.log(error)\n    )*/\n    this.ordens = this.apiService.obterOrdem();\n  }\n  cadastrarOrdem() {\n    if (!this.localEquipamento || !this.tipoEquipamento) return;\n    /*this.apiService.cadastrarOrdem({\n      id: this.id,\n      dataOrdemServico: this.dataOrdemServico,\n      descricaoProblema: this.descricaoProblema,\n      aprovada: this.aprovada,\n      localEquipamento: this.localEquipamento,\n      tipoEquipamento: this.tipoEquipamento,\n      serialEquipamento: this.serialEquipamento,\n      estadoOrdemServico: this.estadoOrdemServico,\n      userId: this.userId,\n      user: this.user })\n    .subscribe(_ => this.obterOrdensCadastradas())*/\n  }\n};\n\nFormNovaOsComponent = __decorate([Component({\n  selector: 'app-form-nova-os',\n  templateUrl: './form-nova-os.component.html',\n  styleUrls: ['./form-nova-os.component.scss']\n})], FormNovaOsComponent);","map":{"version":3,"names":["Component","Observable","FormNovaOsComponent","constructor","http","modalSS","apiService","modalSwitch","formulario","id","dataOrdemServico","Date","descricaoProblema","aprovada","localEquipamento","tipoEquipamento","serialEquipamento","userId","ordens","obterOrdensCadastradas","ngOnInit","$modal","subscribe","valor","openModal","obterOrdem","cadastrarOrdem","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\components\\form-nova-os\\form-nova-os.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SwitchService } from 'src/app/services/switch.service';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { OrdemServico } from 'src/app/models/ordem-servico';\nimport { OrdemService } from 'src/app/services/ordem.service';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from 'src/app/models/user';\nimport { EstadoOrdemServicoEnum } from 'src/app/models/estado-ordem-servico-enum';\nimport { OrdemEquipamento } from 'src/app/models/ordem-equipamento';\nimport { Lancamento } from 'src/app/models/lancamento';\n\n@Component({\n  selector: 'app-form-nova-os',\n  templateUrl: './form-nova-os.component.html',\n  styleUrls: ['./form-nova-os.component.scss']\n})\nexport class FormNovaOsComponent {\n  \n  modalSwitch: boolean = false;\n  formulario: any = {};\n\n  id: number = 0;\n  dataOrdemServico: Date = new Date();\n  descricaoProblema: string = '';\n  aprovada: boolean = false;\n  localEquipamento: string = '';\n  tipoEquipamento: string = '';\n  serialEquipamento: string = '';\n  estadoOrdemServico: EstadoOrdemServicoEnum | undefined;\n  userId: number = 0;\n  user: User | undefined;\n  ordemEquipamentos?: OrdemEquipamento[];\n  lancamentos?: Lancamento[];\n\n\n  constructor(\n    private http: HttpClient,\n    private modalSS: SwitchService,\n     private apiService: ApiService) {\n      // console.log('TO AQUI', environment.api)\n      this.obterOrdensCadastradas();\n     }\n\n  ngOnInit(){\n    // executando observable\n    this.modalSS.$modal.subscribe((valor) => {this.modalSwitch = valor}); \n  }\n\n  openModal(){\n    this.modalSwitch = true;\n  }\n\n  //ordens  : Ordem[] = []\n  ordens = new Observable<OrdemServico[]>();\n\n\n  public obterOrdensCadastradas(){ //request pra api\n    // this.apiService.obterOrdem().\n    // subscribe(ordens => this.ordens = ordens)\n    /*this.http.get('https://localhost:5001/api/ordens').subscribe(\n      response => this.ordem = response, \n      error => console.log(error)\n    )*/\n\n    this.ordens = this.apiService.obterOrdem();\n  }\n\n  cadastrarOrdem(){\n    if(!this.localEquipamento || !this.tipoEquipamento)\n      return;\n\n    /*this.apiService.cadastrarOrdem({ \n      id: this.id,\n      dataOrdemServico: this.dataOrdemServico,\n      descricaoProblema: this.descricaoProblema,\n      aprovada: this.aprovada,\n      localEquipamento: this.localEquipamento,\n      tipoEquipamento: this.tipoEquipamento,\n      serialEquipamento: this.serialEquipamento,\n      estadoOrdemServico: this.estadoOrdemServico,\n      userId: this.userId,\n      user: this.user })\n    .subscribe(_ => this.obterOrdensCadastradas())*/\n  }\n\n\n // openModel(){\n   /* // Verifica se todos os campos obrigatórios foram preenchidos\n    if (this.local.trim() === '' && this.tipo.trim() === '' && this.posicao.trim() === '' \n    && this.serial.trim() === '' &&    this.descricao.trim() === ''){\n      alert(\"Por favor, preencha todos os campos.\"); // Caso contrário, exibe um alerta\n    } else {\n      this.modalSwitch = true; // Abre o modal se todos os campos estiverem preenchidos\n    }*/\n  //}\n\n\n  /*\n   modalVisible = false;\n\n   openModal() {\n     this.modalVisible = true;\n     document.getElementById('myModal')!.style.display = 'block'; // Exibe o modal\n   }\n \n   closeModal() {\n     this.modalVisible = false;\n     document.getElementById('myModal')!.style.display = 'none'; // Oculta o modal\n   }\n \n   onSubmit(form: any) {\n     if (form.valid) {\n       this.openModal();\n     }\n   }\n  */\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAASC,UAAU,QAAQ,MAAM;AAc1B,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAmB9BC,YACUC,IAAgB,EAChBC,OAAsB,EACrBC,UAAsB;IAFvB,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,OAAO,GAAPA,OAAO;IACN,KAAAC,UAAU,GAAVA,UAAU;IApBrB,KAAAC,WAAW,GAAY,KAAK;IAC5B,KAAAC,UAAU,GAAQ,EAAE;IAEpB,KAAAC,EAAE,GAAW,CAAC;IACd,KAAAC,gBAAgB,GAAS,IAAIC,IAAI,EAAE;IACnC,KAAAC,iBAAiB,GAAW,EAAE;IAC9B,KAAAC,QAAQ,GAAY,KAAK;IACzB,KAAAC,gBAAgB,GAAW,EAAE;IAC7B,KAAAC,eAAe,GAAW,EAAE;IAC5B,KAAAC,iBAAiB,GAAW,EAAE;IAE9B,KAAAC,MAAM,GAAW,CAAC;IAuBlB;IACA,KAAAC,MAAM,GAAG,IAAIjB,UAAU,EAAkB;IAdrC;IACA,IAAI,CAACkB,sBAAsB,EAAE;EAC9B;EAEHC,QAAQA,CAAA;IACN;IACA,IAAI,CAACf,OAAO,CAACgB,MAAM,CAACC,SAAS,CAAEC,KAAK,IAAI;MAAE,IAAI,CAAChB,WAAW,GAAGgB,KAAK;IAAA,CAAC,CAAC;EACtE;EAEAC,SAASA,CAAA;IACP,IAAI,CAACjB,WAAW,GAAG,IAAI;EACzB;EAMOY,sBAAsBA,CAAA;IAC3B;IACA;IACA;;;;IAKA,IAAI,CAACD,MAAM,GAAG,IAAI,CAACZ,UAAU,CAACmB,UAAU,EAAE;EAC5C;EAEAC,cAAcA,CAAA;IACZ,IAAG,CAAC,IAAI,CAACZ,gBAAgB,IAAI,CAAC,IAAI,CAACC,eAAe,EAChD;IAEF;;;;;;;;;;;;EAYF;CAiCD;;AApGYb,mBAAmB,GAAAyB,UAAA,EAL/B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACW5B,mBAAmB,CAoG/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}