{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    let currentUser;\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => {\n      currentUser = user;\n      if (currentUser) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${currentUser.token}`\n          }\n        });\n      }\n    });\n    return next.handle(request);\n    /*return this.accountService.currentUser$.pipe(\n      take(1),\n      switchMap(currentUser => {\n        if (currentUser) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `Bearer ${currentUser.token}`\n            }\n          });\n        }\n        return next.handle(request);\n      })\n    );*/\n  }\n  static #_ = this.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["take","JwtInterceptor","constructor","accountService","intercept","request","next","currentUser","currentUser$","pipe","subscribe","user","clone","setHeaders","Authorization","token","handle","_","i0","ɵɵinject","i1","AccountService","_2","factory","ɵfac"],"sources":["C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\interceptors\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AccountService } from '../services/account.service';\nimport { User } from '../models/identity/user';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(private accountService: AccountService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let currentUser: User;\n\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => {\n     currentUser = user\n\n     if (currentUser) {\n      request = request.clone({\n            setHeaders: {\n            Authorization: `Bearer ${currentUser.token}`\n          }\n        }\n      );\n     }\n  });\n  return next.handle(request);\n      \n    /*return this.accountService.currentUser$.pipe(\n      take(1),\n      switchMap(currentUser => {\n        if (currentUser) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `Bearer ${currentUser.token}`\n            }\n          });\n        }\n        return next.handle(request);\n      })\n    );*/\n\n  }\n}\n"],"mappings":"AAQA,SAAoBA,IAAI,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAmB;EAErDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAIC,WAAiB;IAErB,IAAI,CAACJ,cAAc,CAACK,YAAY,CAACC,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC,CAACU,SAAS,CAACC,IAAI,IAAG;MAC/DJ,WAAW,GAAGI,IAAI;MAElB,IAAIJ,WAAW,EAAE;QAChBF,OAAO,GAAGA,OAAO,CAACO,KAAK,CAAC;UAClBC,UAAU,EAAE;YACZC,aAAa,EAAE,UAAUP,WAAW,CAACQ,KAAK;;SAE7C,CACF;;IAEL,CAAC,CAAC;IACF,OAAOT,IAAI,CAACU,MAAM,CAACX,OAAO,CAAC;IAEzB;;;;;;;;;;;;;EAcF;EAAC,QAAAY,CAAA,G;qBAnCUhB,cAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdrB,cAAc;IAAAsB,OAAA,EAAdtB,cAAc,CAAAuB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}