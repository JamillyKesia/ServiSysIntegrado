{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  open(content, options) {\n    /*const modalComponentFactory = this.resolver.resolveComponentFactory(ModalComponent);\n    const contentViewRef= content.createEmbeddedView(null);\n    const modalComponent = modalComponentFactory.create(this.injector, [contentViewRef.rootNodes,\n    ]);\n       modalComponent.hostView.detectChanges()\n       this.document.body.appendChild(modalComponent.location.nativeElement);\n    }\n    /*private modalAberto: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n     constructor() { }\n     abrirModal(): void {\n    this.modalAberto.next(true);\n    }\n     fecharModal(): void {\n    this.modalAberto.next(false);\n    }\n     isModalAberto(): Observable<boolean> {\n    return this.modalAberto.asObservable();\n    }*/\n  }\n  static #_ = this.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ModalService","open","content","options","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\services\\modal.service.ts"],"sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  resolver: any;\n  open(content: TemplateRef<any>, options?: {size?: string; title?: string}){\n     /*const modalComponentFactory = this.resolver.resolveComponentFactory(ModalComponent);\n     const contentViewRef= content.createEmbeddedView(null);\n     const modalComponent = modalComponentFactory.create(this.injector, [contentViewRef.rootNodes,\n    ]);\n\n    modalComponent.hostView.detectChanges()\n\n    this.document.body.appendChild(modalComponent.location.nativeElement);\n  }\n  /*private modalAberto: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  constructor() { }\n\n  abrirModal(): void {\n    this.modalAberto.next(true);\n  }\n\n  fecharModal(): void {\n    this.modalAberto.next(false);\n  }\n\n  isModalAberto(): Observable<boolean> {\n    return this.modalAberto.asObservable();\n  }*/\n}\n"],"mappings":";AAMA,OAAM,MAAOA,YAAY;EAEvBC,IAAIA,CAACC,OAAyB,EAAEC,OAAyC;IACtE;;;;;;;;;;;;;;;;;;EAAA;EAwBJ,QAAAC,CAAA,G;qBA3BYJ,YAAY;EAAA;EAAA,QAAAK,EAAA,G;WAAZL,YAAY;IAAAM,OAAA,EAAZN,YAAY,CAAAO,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}