{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ModalComponent } from '../components/modal/modal.component';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nexport let ModalService = class ModalService {\n  abrirModal() {\n    throw new Error('Method not implemented.');\n  }\n  constructor(resolver, injector, document) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.document = document;\n  }\n  open(content, options) {\n    const modalComponentFactory = this.resolver.resolveComponentFactory(ModalComponent);\n    const contentViewRef = content.createEmbeddedView(null);\n    const modalComponent = modalComponentFactory.create(this.injector, [contentViewRef.rootNodes]);\n    modalComponent.instance.size = options?.size;\n    modalComponent.instance.title = options?.title;\n    modalComponent.instance.closeEvent.subscribe(() => this.closeModal());\n    modalComponent.instance.submitEvent.subscribe(() => this.submitModal());\n    modalComponent.hostView.detectChanges();\n    this.document.body.appendChild(modalComponent.location.nativeElement);\n    this.modalNotifier = new Subject();\n    return this.modalNotifier?.asObservable();\n  }\n  closeModal() {\n    this.modalNotifier?.complete();\n  }\n  submitModal() {\n    this.modalNotifier?.next('confirm');\n    this.closeModal();\n  }\n  static #_ = this.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(DOCUMENT));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac,\n    providedIn: 'root'\n  });\n};\nModalService = __decorate([Injectable()], ModalService);","map":{"version":3,"names":["Injectable","Subject","ModalComponent","DOCUMENT","ModalService","abrirModal","Error","constructor","resolver","injector","document","open","content","options","modalComponentFactory","resolveComponentFactory","contentViewRef","createEmbeddedView","modalComponent","create","rootNodes","instance","size","title","closeEvent","subscribe","closeModal","submitEvent","submitModal","hostView","detectChanges","body","appendChild","location","nativeElement","modalNotifier","asObservable","complete","next","_","i0","ɵɵinject","ComponentFactoryResolver","Injector","_2","factory","ɵfac","providedIn","__decorate"],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\services\\modal.service.ts"],"sourcesContent":["import { ComponentFactoryResolver, Inject, Injectable, Injector, TemplateRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { ModalComponent } from '../components/modal/modal.component';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n@Injectable()\nexport class ModalService {\n  abrirModal() {\n    throw new Error('Method not implemented.');\n  }\n  private modalNotifier?: Subject<string>\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private injector: Injector,\n    @Inject(DOCUMENT) private document: Document\n  ) {}\n\n  open(content: TemplateRef<any>, options?: {size?: string; title?: string}){\n     const modalComponentFactory = this.resolver.resolveComponentFactory(ModalComponent);\n     const contentViewRef= content.createEmbeddedView(null);\n     const modalComponent = modalComponentFactory.create(this.injector, [contentViewRef.rootNodes,\n    ]);\n\n    modalComponent.instance.size = options?.size\n    modalComponent.instance.title = options?.title;\n    modalComponent.instance.closeEvent.subscribe(() => this.closeModal());\n    modalComponent.instance.submitEvent.subscribe(() => this.submitModal());\n\n    modalComponent.hostView.detectChanges();\n\n    this.document.body.appendChild(modalComponent.location.nativeElement);\n    this.modalNotifier = new Subject()\n    return this.modalNotifier?.asObservable();\n  }\n\n  closeModal(){\n    this.modalNotifier?.complete();\n  }\n\n  submitModal(){\n    this.modalNotifier?.next('confirm');\n    this.closeModal();\n  }\n\n  /*private modalAberto: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  \n\n  abrirModal(): void {\n    this.modalAberto.next(true);\n  }\n\n  fecharModal(): void {\n    this.modalAberto.next(false);\n  }\n\n  isModalAberto(): Observable<boolean> {\n    return this.modalAberto.asObservable();\n  }*/\n}\n"],"mappings":";AAAA,SAA2CA,UAAU,QAA+B,eAAe;AAEnG,SAASC,OAAO,QAAQ,MAAM;AAC9B,SAASC,cAAc,QAAQ,qCAAqC;AACpE,SAASC,QAAQ,QAAQ,iBAAiB;;AAOnC,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EACvBC,UAAUA,CAAA;IACR,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAGAC,YACUC,QAAkC,EAClCC,QAAkB,EACAC,QAAkB;IAFpC,KAAAF,QAAQ,GAARA,QAAQ;IACR,KAAAC,QAAQ,GAARA,QAAQ;IACU,KAAAC,QAAQ,GAARA,QAAQ;EACjC;EAEHC,IAAIA,CAACC,OAAyB,EAAEC,OAAyC;IACtE,MAAMC,qBAAqB,GAAG,IAAI,CAACN,QAAQ,CAACO,uBAAuB,CAACb,cAAc,CAAC;IACnF,MAAMc,cAAc,GAAEJ,OAAO,CAACK,kBAAkB,CAAC,IAAI,CAAC;IACtD,MAAMC,cAAc,GAAGJ,qBAAqB,CAACK,MAAM,CAAC,IAAI,CAACV,QAAQ,EAAE,CAACO,cAAc,CAACI,SAAS,CAC5F,CAAC;IAEFF,cAAc,CAACG,QAAQ,CAACC,IAAI,GAAGT,OAAO,EAAES,IAAI;IAC5CJ,cAAc,CAACG,QAAQ,CAACE,KAAK,GAAGV,OAAO,EAAEU,KAAK;IAC9CL,cAAc,CAACG,QAAQ,CAACG,UAAU,CAACC,SAAS,CAAC,MAAM,IAAI,CAACC,UAAU,EAAE,CAAC;IACrER,cAAc,CAACG,QAAQ,CAACM,WAAW,CAACF,SAAS,CAAC,MAAM,IAAI,CAACG,WAAW,EAAE,CAAC;IAEvEV,cAAc,CAACW,QAAQ,CAACC,aAAa,EAAE;IAEvC,IAAI,CAACpB,QAAQ,CAACqB,IAAI,CAACC,WAAW,CAACd,cAAc,CAACe,QAAQ,CAACC,aAAa,CAAC;IACrE,IAAI,CAACC,aAAa,GAAG,IAAIlC,OAAO,EAAE;IAClC,OAAO,IAAI,CAACkC,aAAa,EAAEC,YAAY,EAAE;EAC3C;EAEAV,UAAUA,CAAA;IACR,IAAI,CAACS,aAAa,EAAEE,QAAQ,EAAE;EAChC;EAEAT,WAAWA,CAAA;IACT,IAAI,CAACO,aAAa,EAAEG,IAAI,CAAC,SAAS,CAAC;IACnC,IAAI,CAACZ,UAAU,EAAE;EACnB;EAAC,QAAAa,CAAA,G;qBArCUnC,YAAY,EAAAoC,EAAA,CAAAC,QAAA,CAAAD,EAAA,CAAAE,wBAAA,GAAAF,EAAA,CAAAC,QAAA,CAAAD,EAAA,CAAAG,QAAA,GAAAH,EAAA,CAAAC,QAAA,CASbtC,QAAQ;EAAA;EAAA,QAAAyC,EAAA,G;WATPxC,YAAY;IAAAyC,OAAA,EAAZzC,YAAY,CAAA0C,IAAA;IAAAC,UAAA,EAJX;EAAM;;AAIP3C,YAAY,GAAA4C,UAAA,EADxBhD,UAAU,EAAE,C,EACAI,YAAY,CAsDxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}