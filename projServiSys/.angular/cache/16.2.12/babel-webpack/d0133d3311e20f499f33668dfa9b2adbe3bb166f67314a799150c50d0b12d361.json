{"ast":null,"code":"export const authFuncionarioGuard = function (route, state) {\n  const isLoggedIn = this.authService.isLoggedIn(); // Supondo que o usuário está autenticado\n  const isFuncionario = this.authService.isFuncionario(); // Supondo que o usuário é um Funcionário\n  if (!isLoggedIn || !isFuncionario) {\n    // Se o usuário não estiver autenticado ou não for Funcionário\n    console.log('Acesso não autorizado para Funcionário');\n    this.router.navigate(['/login']);\n    return false; // Impedir o acesso à rota protegida\n  }\n\n  return true; // Permitir o acesso à rota protegida\n};","map":{"version":3,"names":["authFuncionarioGuard","route","state","isLoggedIn","authService","isFuncionario","console","log","router","navigate"],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\_guard\\auth-funcionario.guard.ts"],"sourcesContent":["import { CanActivateFn } from '@angular/router';\n\nexport const authFuncionarioGuard: CanActivateFn = function (this: any, route, state) {\n  const isLoggedIn = this.authService.isLoggedIn(); // Supondo que o usuário está autenticado\n  const isFuncionario = this.authService.isFuncionario(); // Supondo que o usuário é um Funcionário\n  if (!isLoggedIn || !isFuncionario) {\n    // Se o usuário não estiver autenticado ou não for Funcionário\n    console.log('Acesso não autorizado para Funcionário');\n    this.router.navigate(['/login']);\n    return false; // Impedir o acesso à rota protegida\n  }\n  return true; // Permitir o acesso à rota protegida\n}\n\n\n"],"mappings":"AAEA,OAAO,MAAMA,oBAAoB,GAAkB,SAAAA,CAAqBC,KAAK,EAAEC,KAAK;EAClF,MAAMC,UAAU,GAAG,IAAI,CAACC,WAAW,CAACD,UAAU,EAAE,CAAC,CAAC;EAClD,MAAME,aAAa,GAAG,IAAI,CAACD,WAAW,CAACC,aAAa,EAAE,CAAC,CAAC;EACxD,IAAI,CAACF,UAAU,IAAI,CAACE,aAAa,EAAE;IACjC;IACAC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrD,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK,CAAC,CAAC;;;EAEhB,OAAO,IAAI,CAAC,CAAC;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}