{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrdemService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = environment.apiURL + 'api/OrdemServico';\n    this.tokenHeader = new HttpHeaders({\n      'Authorization': `Bearer ${JSON.parse(localStorage.getItem('user')).tokenHeader}`\n    });\n  }\n  GetOrdemServico() {\n    return this.http.get(this.baseURL, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n    //return this.http.get<OrdemServico[]>(this.baseURL);\n  }\n\n  GetOrdemServicoByUsuario(idUsuario) {\n    return this.http.get(`${this.baseURL}/usuario/${idUsuario}`);\n  }\n  GetOrdemServicoById(id) {\n    return this.http.get(`${this.baseURL}/${id}`);\n  }\n  PostOrdemServico(ordens) {\n    return this.http.post(this.baseURL, ordens);\n  }\n  PutOrdemServico(id, ordens) {\n    return this.http.put(`${this.baseURL}${id}`, ordens);\n  }\n  PatchOrdemServico(id, changes) {\n    return this.http.patch(`${this.baseURL}/Aprovado/${id}`, changes);\n  }\n  static #_ = this.ɵfac = function OrdemService_Factory(t) {\n    return new (t || OrdemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdemService,\n    factory: OrdemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","take","environment","OrdemService","constructor","http","baseURL","apiURL","tokenHeader","JSON","parse","localStorage","getItem","GetOrdemServico","get","headers","pipe","GetOrdemServicoByUsuario","idUsuario","GetOrdemServicoById","id","PostOrdemServico","ordens","post","PutOrdemServico","put","PatchOrdemServico","changes","patch","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\services\\ordem.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { OrdemServico } from '../models/ordem-servico';\nimport { Observable, take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdemService {\n\n  baseURL = environment.apiURL + 'api/OrdemServico';\n  tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${JSON.parse(localStorage.getItem('user')).tokenHeader}`});\n\n  constructor(private http: HttpClient) {}\n\n  public GetOrdemServico(): Observable<OrdemServico[]>{\n    return this.http.get<OrdemServico[]>(this.baseURL,{ headers: this.tokenHeader }).pipe(take(1));\n    //return this.http.get<OrdemServico[]>(this.baseURL);\n  }\n\n  public GetOrdemServicoByUsuario(idUsuario: number): Observable<OrdemServico[]>  {\n    return this.http.get<OrdemServico[]>(`${this.baseURL}/usuario/${idUsuario}`);\n  }\n\n  public GetOrdemServicoById(id: number): Observable<OrdemServico>{\n    return this.http.get<OrdemServico>(`${this.baseURL}/${id}`);\n  }\n\n  public PostOrdemServico(ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http.post<OrdemServico>(this.baseURL, ordens);\n  }\n\n  public PutOrdemServico(id: number, ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http.put<OrdemServico>(`${this.baseURL}${id}`,ordens);\n  }\n\n  public PatchOrdemServico(id: number, changes: Partial<OrdemServico>): Observable<any> {\n    return this.http.patch(`${this.baseURL}/Aprovado/${id}`, changes);\n  }\n\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,IAAI,QAAQ,MAAM;AACvC,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM,GAAG,kBAAkB;IACjD,KAAAC,WAAW,GAAG,IAAIR,WAAW,CAAC;MAAE,eAAe,EAAE,UAAUS,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACJ,WAAW;IAAE,CAAC,CAAC;EAE5E;EAEhCK,eAAeA,CAAA;IACpB,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAiB,IAAI,CAACR,OAAO,EAAC;MAAES,OAAO,EAAE,IAAI,CAACP;IAAW,CAAE,CAAC,CAACQ,IAAI,CAACf,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9F;EACF;;EAEOgB,wBAAwBA,CAACC,SAAiB;IAC/C,OAAO,IAAI,CAACb,IAAI,CAACS,GAAG,CAAiB,GAAG,IAAI,CAACR,OAAO,YAAYY,SAAS,EAAE,CAAC;EAC9E;EAEOC,mBAAmBA,CAACC,EAAU;IACnC,OAAO,IAAI,CAACf,IAAI,CAACS,GAAG,CAAe,GAAG,IAAI,CAACR,OAAO,IAAIc,EAAE,EAAE,CAAC;EAC7D;EAEOC,gBAAgBA,CAACC,MAAoB;IAC1C,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAe,IAAI,CAACjB,OAAO,EAAEgB,MAAM,CAAC;EAC3D;EAEOE,eAAeA,CAACJ,EAAU,EAAEE,MAAoB;IACrD,OAAO,IAAI,CAACjB,IAAI,CAACoB,GAAG,CAAe,GAAG,IAAI,CAACnB,OAAO,GAAGc,EAAE,EAAE,EAACE,MAAM,CAAC;EACnE;EAEOI,iBAAiBA,CAACN,EAAU,EAAEO,OAA8B;IACjE,OAAO,IAAI,CAACtB,IAAI,CAACuB,KAAK,CAAC,GAAG,IAAI,CAACtB,OAAO,aAAac,EAAE,EAAE,EAAEO,OAAO,CAAC;EACnE;EAAC,QAAAE,CAAA,G;qBA9BU1B,YAAY,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ/B,YAAY;IAAAgC,OAAA,EAAZhC,YAAY,CAAAiC,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}