{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, of, take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrdemService {\n  //tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${JSON.parse(localStorage.getItem('user')).token}`});\n  constructor(http) {\n    this.http = http;\n    this.baseURL = environment.apiURL + 'api/OrdemServico';\n    this.tokenHeader = null;\n    this.setTokenHeader();\n  }\n  setTokenHeader() {\n    const user = localStorage.getItem('user');\n    if (user) {\n      try {\n        const parsedUser = JSON.parse(user);\n        if (parsedUser && parsedUser.tokenHeader) {\n          this.tokenHeader = new HttpHeaders({\n            'Authorization': `Bearer ${parsedUser.tokenHeader}`\n          });\n        } else {\n          console.error('Token não encontrado no objeto usuário.');\n        }\n      } catch (e) {\n        console.error('Erro ao analisar o JSON armazenado em localStorage:', e);\n      }\n    } else {\n      console.error('Usuário não encontrado no localStorage.');\n    }\n  }\n  GetOrdemServico() {\n    if (this.tokenHeader) {\n      return this.http.get(this.baseURL, {\n        headers: this.tokenHeader\n      }).pipe(take(1), catchError(this.handleError('GetOrdemServico', [])));\n    } else {\n      return of([]); // Retorna um observable de uma lista vazia em caso de erro\n    }\n  }\n\n  GetOrdemServicoByUsuario(idUsuario) {\n    return this.http.get(`${this.baseURL}/usuario/${idUsuario}`).pipe(catchError(this.handleError('GetOrdemServicoByUsuario', [])));\n  }\n  GetOrdemServicoById(id) {\n    return this.http.get(`${this.baseURL}/${id}`).pipe(catchError(this.handleError('GetOrdemServicoById')));\n  }\n  PostOrdemServico(ordens) {\n    return this.http.post(this.baseURL, ordens).pipe(catchError(this.handleError('PostOrdemServico')));\n  }\n  PutOrdemServico(id, ordens) {\n    return this.http.put(`${this.baseURL}${id}`, ordens).pipe(catchError(this.handleError('PutOrdemServico')));\n  }\n  PatchOrdemServico(id, changes) {\n    return this.http.patch(`${this.baseURL}/Aprovado/${id}`, changes).pipe(catchError(this.handleError('PatchOrdemServico')));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error); // Logar o erro para análise\n      // Devolver um resultado seguro para a aplicação continuar funcionando\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function OrdemService_Factory(t) {\n    return new (t || OrdemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdemService,\n    factory: OrdemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","catchError","of","take","environment","OrdemService","constructor","http","baseURL","apiURL","tokenHeader","setTokenHeader","user","localStorage","getItem","parsedUser","JSON","parse","console","error","e","GetOrdemServico","get","headers","pipe","handleError","GetOrdemServicoByUsuario","idUsuario","GetOrdemServicoById","id","PostOrdemServico","ordens","post","PutOrdemServico","put","PatchOrdemServico","changes","patch","operation","result","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\services\\ordem.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { OrdemServico } from '../models/ordem-servico';\nimport { Observable, catchError, of, take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdemService {\n\n  baseURL = environment.apiURL + 'api/OrdemServico';\n  tokenHeader: HttpHeaders | null = null;\n  //tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${JSON.parse(localStorage.getItem('user')).token}`});\n\n  constructor(private http: HttpClient) {\n    this.setTokenHeader();\n  }\n\n  private setTokenHeader(): void {\n    const user = localStorage.getItem('user');\n    if (user) {\n      try {\n        const parsedUser = JSON.parse(user);\n        if (parsedUser && parsedUser.tokenHeader) {\n          this.tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${parsedUser.tokenHeader}` });\n        } else {\n          console.error('Token não encontrado no objeto usuário.');\n        }\n      } catch (e) {\n        console.error('Erro ao analisar o JSON armazenado em localStorage:', e);\n      }\n    } else {\n      console.error('Usuário não encontrado no localStorage.');\n    }\n  }\n\n  public GetOrdemServico(): Observable<OrdemServico[]> {\n    if (this.tokenHeader) {\n      return this.http.get<OrdemServico[]>(this.baseURL, { headers: this.tokenHeader }).pipe(\n        take(1),\n        catchError(this.handleError<OrdemServico[]>('GetOrdemServico', []))\n      );\n    } else {\n      return of([]); // Retorna um observable de uma lista vazia em caso de erro\n    }\n  }\n\n  public GetOrdemServicoByUsuario(idUsuario: number): Observable<OrdemServico[]>  {\n    return this.http.get<OrdemServico[]>(`${this.baseURL}/usuario/${idUsuario}`).pipe(\n      catchError(this.handleError<OrdemServico[]>('GetOrdemServicoByUsuario', []))\n    );\n  }\n\n  public GetOrdemServicoById(id: number): Observable<OrdemServico> {\n    return this.http.get<OrdemServico>(`${this.baseURL}/${id}`).pipe(\n      catchError(this.handleError<OrdemServico>('GetOrdemServicoById'))\n    );\n  }\n\n  public PostOrdemServico(ordens: OrdemServico): Observable<OrdemServico> {\n    return this.http.post<OrdemServico>(this.baseURL, ordens).pipe(\n      catchError(this.handleError<OrdemServico>('PostOrdemServico'))\n    );\n  }\n\n  public PutOrdemServico(id: number, ordens: OrdemServico): Observable<OrdemServico> {\n    return this.http.put<OrdemServico>(`${this.baseURL}${id}`, ordens).pipe(\n      catchError(this.handleError<OrdemServico>('PutOrdemServico'))\n    );\n  }\n\n  public PatchOrdemServico(id: number, changes: Partial<OrdemServico>): Observable<any> {\n    return this.http.patch(`${this.baseURL}/Aprovado/${id}`, changes).pipe(\n      catchError(this.handleError<any>('PatchOrdemServico'))\n    );\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // Logar o erro para análise\n\n      // Devolver um resultado seguro para a aplicação continuar funcionando\n      return of(result as T);\n    };\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}