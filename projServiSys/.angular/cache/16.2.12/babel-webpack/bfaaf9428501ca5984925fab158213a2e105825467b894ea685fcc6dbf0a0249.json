{"ast":null,"code":"import { environment } from './../../../environments/environment';\nimport { UserService } from 'src/app/services/user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class LoginComponent {\n  //route: any;\n  //authService: any;\n  /*clicar(){\n    alert('Login realizado');\n  }*/\n  constructor(router,\n  //private autorizacaoService:AutorizacaoService,\n  route) {\n    this.router = router;\n    this.route = route;\n    this.usuario = '';\n    this.senha = '';\n    console.log(environment.api);\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.tipoUsuario = params['tipoUsuario'];\n      this.carregarLogo();\n    });\n  }\n  //ver como fazer o tipoUsuario ser visivel a partir da rota\n  realizarLogin() {\n    // Use o observable params para obter os dados da rota\n    /*this.route.params.pipe(\n      switchMap(params => {\n        // Defina o tipo de usuário com base nos parâmetros da rota\n        this.tipoUsuario = params['tipoUsuario'];\n        console.log(this.tipoUsuario);\n        // Chame o método login usando os dados da rota\n       // return this.login('tipoUsuario');\n      })\n    ).subscribe(success => {\n      if (success) {\n        // Redirecionar para a página inicial correspondente apenas em caso de login bem-sucedido\n        this.redirectToHome(success);\n      } else {\n        // Exibir uma mensagem de erro em caso de credenciais inválidas\n        alert('Credenciais inválidas. Tente novamente.');\n      }\n    });*/\n  }\n  /* private login(tipoUsuario: string): Observable<boolean> {\n     // Chame o método login do serviço AuthLoginService\n     return (this.authLoginService.fazerLogin({ tipoUsuario, login: this.usuario, senha: this.senha }));\n   }*/\n  redirectToHome(success) {\n    // Redirecionar para a página inicial correspondente após o login bem-sucedido\n    if (success) {\n      switch (this.tipoUsuario) {\n        case 'funcionario':\n          this.router.navigate(['/funcionario/home']);\n          break;\n        case 'coordenador':\n          this.router.navigate(['/coordenador/home']);\n          break;\n        case 'cpd':\n          this.router.navigate(['/cpd/home']);\n          break;\n        default:\n          // Redirecionar para uma página padrão se o tipo de usuário não for reconhecido\n          this.router.navigate(['/']);\n          break;\n      }\n    }\n  }\n  carregarLogo() {\n    switch (this.tipoUsuario) {\n      case 'funcionario':\n        this.logoPath = 'assets/images/ServiSysLogoBranca.png';\n        console.log(this.tipoUsuario);\n        break;\n      case 'coordenador':\n        this.logoPath = 'assets/images/ServiSysLogoADM.png';\n        console.log(this.tipoUsuario);\n        break;\n      case 'cpd':\n        this.logoPath = 'assets/images/ServiSysLogoCPD.png';\n        console.log(this.tipoUsuario);\n        break;\n      default:\n        this.logoPath = 'assets/images/ServiSysLogoBranca.png';\n        // console.log(this.tipoUsuario);\n        break;\n    }\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    features: [i0.ɵɵProvidersFeature([UserService])],\n    decls: 21,\n    vars: 1,\n    consts: [[1, \"left-section\"], [\"alt\", \"Logotipo\", 1, \"logo\", 3, \"src\"], [\"src\", \"assets/images/img-login.png\", \"alt\", \"ilustra\\u00E7\\u00E3o verde com duas pessoas\", 1, \"img-decor\"], [1, \"right-section\"], [1, \"frase-mobile\"], [\"method\", \"POST\", 3, \"ngSubmit\"], [\"for\", \"input1\", 1, \"login\"], [\"type\", \"text\", \"maxLength\", \"50\", \"id\", \"input1\", \"name\", \"input1\", \"required\", \"\"], [\"for\", \"input2\", 1, \"senha\"], [\"type\", \"password\", \"maxLength\", \"8\", \"id\", \"input2\", \"name\", \"input2\", \"required\", \"\"], [\"type\", \"submit\", 1, \"button\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"img\", 1)(2, \"img\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"h4\");\n        i0.ɵɵtext(5, \"Seja bem-vindo(a) ao\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"h3\");\n        i0.ɵɵtext(7, \"ServiSys!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"p\", 4);\n        i0.ɵɵtext(9, \"Seja bem-vindo(a) ao ServiSys\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"p\");\n        i0.ɵɵtext(11, \"Entre com suas credenciais para acessar o sistema\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_12_listener() {\n          return ctx.realizarLogin();\n        });\n        i0.ɵɵelementStart(13, \"label\", 6);\n        i0.ɵɵtext(14, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 7);\n        i0.ɵɵelementStart(16, \"label\", 8);\n        i0.ɵɵtext(17, \"Senha\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 9);\n        i0.ɵɵelementStart(19, \"button\", 10);\n        i0.ɵɵtext(20, \"Enviar\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"src\", ctx.logoPath, i0.ɵɵsanitizeUrl);\n      }\n    },\n    styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\tvar __webpack_modules__ = ({\\n\\n\\n 355:\\n\\n\\n\\n\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/sass-loader/dist/cjs.js):\\\\nexpected \\\\\\\"}\\\\\\\".\\\\n    \\u2577\\\\n377 \\u2502 }\\\\n    \\u2502  ^\\\\n    \\u2575\\\\n  src\\\\\\\\app\\\\\\\\pages\\\\\\\\login\\\\\\\\login.component.scss 377:2  root stylesheet\\\");\\n\\n\\n })\\n\\n\\n \\t})[_ngcontent-%COMP%];\\n\\n\\n\\n \\t\\n\\n \\t//[_ngcontent-%COMP%]   startup\\n\\n[_ngcontent-%COMP%]   //[_ngcontent-%COMP%]   Load[_ngcontent-%COMP%]   entry[_ngcontent-%COMP%]   module[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   return[_ngcontent-%COMP%]   exports\\n\\n[_ngcontent-%COMP%]   //[_ngcontent-%COMP%]   This[_ngcontent-%COMP%]   entry[_ngcontent-%COMP%]   module[_ngcontent-%COMP%]   doesn't[_ngcontent-%COMP%]   tell[_ngcontent-%COMP%]   about[_ngcontent-%COMP%]   it's[_ngcontent-%COMP%]   top-level[_ngcontent-%COMP%]   declarations[_ngcontent-%COMP%]   so[_ngcontent-%COMP%]   it[_ngcontent-%COMP%]   can't[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   inlined\\n\\n[_ngcontent-%COMP%]   var[_ngcontent-%COMP%]   __webpack_exports__[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] {};\\n\\n \\t__webpack_modules__[355]();\\n\\n \\tresource = __webpack_exports__;\\n\\n \\t\\n\\n })()\\n;\"]\n  });\n}","map":{"version":3,"names":["environment","UserService","LoginComponent","constructor","router","route","usuario","senha","console","log","api","ngOnInit","params","subscribe","tipoUsuario","carregarLogo","realizarLogin","redirectToHome","success","navigate","logoPath","_","i0","ɵɵdirectiveInject","i1","Router","ActivatedRoute","_2","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵlistener","LoginComponent_Template_form_ngSubmit_12_listener","ɵɵadvance","ɵɵproperty","ɵɵsanitizeUrl"],"sources":["C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\pages\\login\\login.component.ts","C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\pages\\login\\login.component.html"],"sourcesContent":["import { environment } from './../../../environments/environment';\nimport { AutorizacaoService } from './../../services/autorizacao.service';\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\nimport { Component, EnvironmentInjector } from '@angular/core';\nimport { Observable, switchMap } from 'rxjs';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  providers: [UserService]\n})\nexport class LoginComponent {\n\n  usuario: string = '';\n  senha: string = '';\n\n  loginAutorizado: true | undefined;\n  tipoUsuario: string | undefined;\n  logoPath: string | undefined;\n  //route: any;\n\n  //authService: any;\n  \n  /*clicar(){\n    alert('Login realizado');\n  }*/\n\n  constructor(\n    private router: Router,\n    //private autorizacaoService:AutorizacaoService,\n    private route: ActivatedRoute\n  ) {\n    console.log(environment.api)\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.tipoUsuario = params['tipoUsuario'];\n      this.carregarLogo();\n    });\n  }\n\n\n  //ver como fazer o tipoUsuario ser visivel a partir da rota\n  realizarLogin(): void {\n    // Use o observable params para obter os dados da rota\n    /*this.route.params.pipe(\n      switchMap(params => {\n        // Defina o tipo de usuário com base nos parâmetros da rota\n        this.tipoUsuario = params['tipoUsuario'];\n        console.log(this.tipoUsuario);\n        // Chame o método login usando os dados da rota\n       // return this.login('tipoUsuario');\n      })\n    ).subscribe(success => {\n      if (success) {\n        // Redirecionar para a página inicial correspondente apenas em caso de login bem-sucedido\n        this.redirectToHome(success);\n      } else {\n        // Exibir uma mensagem de erro em caso de credenciais inválidas\n        alert('Credenciais inválidas. Tente novamente.');\n      }\n    });*/\n  }\n\n /* private login(tipoUsuario: string): Observable<boolean> {\n    // Chame o método login do serviço AuthLoginService\n    return (this.authLoginService.fazerLogin({ tipoUsuario, login: this.usuario, senha: this.senha }));\n  }*/\n\n  private redirectToHome(success: boolean): void {\n    // Redirecionar para a página inicial correspondente após o login bem-sucedido\n    if (success) {\n      switch (this.tipoUsuario) {\n        case 'funcionario':\n          this.router.navigate(['/funcionario/home']);\n          break;\n        case 'coordenador':\n          this.router.navigate(['/coordenador/home']);\n          break;\n        case 'cpd':\n          this.router.navigate(['/cpd/home']);\n          break;\n        default:\n          // Redirecionar para uma página padrão se o tipo de usuário não for reconhecido\n          this.router.navigate(['/']);\n          break;\n      }\n    }\n  }\n\n   private carregarLogo(): void {\n    switch (this.tipoUsuario) {\n      case 'funcionario':\n        this.logoPath = 'assets/images/ServiSysLogoBranca.png';\n        console.log(this.tipoUsuario);\n        break;\n      case 'coordenador':\n        this.logoPath = 'assets/images/ServiSysLogoADM.png';\n        console.log(this.tipoUsuario);\n        break;\n      case 'cpd':\n        this.logoPath = 'assets/images/ServiSysLogoCPD.png';\n        console.log(this.tipoUsuario);\n        break;\n      default:\n        this.logoPath = 'assets/images/ServiSysLogoBranca.png';\n       // console.log(this.tipoUsuario);\n        break;\n    }\n  }\n}","<div class=\"left-section\">\n    <!--<img class=\"logo\" src=\"assets/images/ServiSysLogoBranca.png\" alt=\"logo ServiSys\">-->\n    <img class=\"logo\" [src]=\"logoPath\" alt=\"Logotipo\">\n    <img class=\"img-decor\" src=\"assets/images/img-login.png\" alt=\"ilustração verde com duas pessoas\">\n</div>\n<div class=\"right-section\">\n    <h4>Seja bem-vindo(a) ao</h4>\n    <h3>ServiSys!</h3>\n    <p class=\"frase-mobile\">Seja bem-vindo(a) ao ServiSys</p>\n    <p>Entre com suas credenciais para acessar o sistema</p>\n    <form method=\"POST\" (ngSubmit)=\"realizarLogin()\">\n        <label for=\"input1\" class=\"login\">Login</label>\n        <input type=\"text\" maxLength=\"50\" id=\"input1\" name=\"input1\" required>\n\n        <label for=\"input2\" class=\"senha\">Senha</label>\n        <input type=\"password\" maxLength=\"8\" id=\"input2\" name=\"input2\" required>\n\n        <button class=\"button\" type=\"submit\">Enviar</button>\n    </form>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}