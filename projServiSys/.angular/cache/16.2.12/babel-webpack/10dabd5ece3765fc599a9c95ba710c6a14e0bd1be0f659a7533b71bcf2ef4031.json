{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let ModalService = class ModalService {\n  static #_ = this.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac,\n    providedIn: 'root'\n  });\n};\nModalService = __decorate([Injectable()], ModalService);","map":{"version":3,"names":["Injectable","ModalService","_","_2","factory","ɵfac","providedIn","__decorate"],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\services\\modal.service.ts"],"sourcesContent":["import { ComponentFactoryResolver, Inject, Injectable, Injector, TemplateRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { ModalComponent } from '../components/modal/modal.component';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n@Injectable()\nexport class ModalService {\n /* abrirModal() {\n    throw new Error('Method not implemented.');\n  }\n  private modalNotifier?: Subject<string>\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private injector: Injector,\n    @Inject(DOCUMENT) private document: Document\n  ) {}\n\n  open(content: TemplateRef<any>, options?: {size?: string; title?: string}){\n     const modalComponentFactory = this.resolver.resolveComponentFactory(ModalComponent);\n     const contentViewRef= content.createEmbeddedView(null);\n     const modalComponent = modalComponentFactory.create(this.injector, [contentViewRef.rootNodes,\n    ]);\n\n    modalComponent.instance.size = options?.size\n    modalComponent.instance.title = options?.title;\n    modalComponent.instance.closeEvent.subscribe(() => this.closeModal());\n    modalComponent.instance.submitEvent.subscribe(() => this.submitModal());\n\n    modalComponent.hostView.detectChanges();\n\n    this.document.body.appendChild(modalComponent.location.nativeElement);\n    this.modalNotifier = new Subject()\n    return this.modalNotifier?.asObservable();\n  }\n\n  closeModal(){\n    this.modalNotifier?.complete();\n  }\n\n  submitModal(){\n    this.modalNotifier?.next('confirm');\n    this.closeModal();\n  }*/\n\n  /*private modalAberto: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  \n\n  abrirModal(): void {\n    this.modalAberto.next(true);\n  }\n\n  fecharModal(): void {\n    this.modalAberto.next(false);\n  }\n\n  isModalAberto(): Observable<boolean> {\n    return this.modalAberto.asObservable();\n  }*/\n}\n"],"mappings":";AAAA,SAA2CA,UAAU,QAA+B,eAAe;;AAW5F,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAAA,QAAAC,CAAA,G;qBAAZD,YAAY;EAAA;EAAA,QAAAE,EAAA,G;WAAZF,YAAY;IAAAG,OAAA,EAAZH,YAAY,CAAAI,IAAA;IAAAC,UAAA,EAJX;EAAM;;AAIPL,YAAY,GAAAM,UAAA,EADxBP,UAAU,EAAE,C,EACAC,YAAY,CAsDxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}