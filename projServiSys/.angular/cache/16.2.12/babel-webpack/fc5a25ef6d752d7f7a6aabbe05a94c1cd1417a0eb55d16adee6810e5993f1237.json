{"ast":null,"code":"import { take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrdemService {\n  //tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${JSON.parse(localStorage.getItem('user')).token}`});\n  constructor(http) {\n    this.http = http;\n    this.baseURL = environment.apiURL + 'api/OrdemServico';\n    this.tokenHeader = null;\n  }\n  GetOrdemServico() {\n    return this.http.get(this.baseURL, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n    //return this.http.get<OrdemServico[]>(this.baseURL);\n  }\n\n  GetOrdemServicoByUsuario(idUsuario) {\n    return this.http.get(`${this.baseURL}/usuario/${idUsuario}`, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  GetOrdemServicoById(id) {\n    return this.http.get(`${this.baseURL}/${id}`, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  PostOrdemServico(ordens) {\n    return this.http.post(this.baseURL, ordens, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  /*public PutOrdemServico(id: number, ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http\n    .put<OrdemServico>(`${this.baseURL}${id}`,ordens, { headers: this.tokenHeader }).pipe(take(1));\n  }*/\n  PatchOrdemServico(id, changes) {\n    return this.http.patch(`${this.baseURL}/Aprovado/${id}`, changes, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  static #_ = this.ɵfac = function OrdemService_Factory(t) {\n    return new (t || OrdemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdemService,\n    factory: OrdemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["take","environment","OrdemService","constructor","http","baseURL","apiURL","tokenHeader","GetOrdemServico","get","headers","pipe","GetOrdemServicoByUsuario","idUsuario","GetOrdemServicoById","id","PostOrdemServico","ordens","post","PatchOrdemServico","changes","patch","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\services\\ordem.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { OrdemServico } from '../models/ordem-servico';\nimport { Observable, take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdemService {\n\n  baseURL = environment.apiURL + 'api/OrdemServico';\n  tokenHeader: HttpHeaders | null = null;\n  //tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${JSON.parse(localStorage.getItem('user')).token}`});\n\n  constructor(private http: HttpClient) {}\n\n  public GetOrdemServico(): Observable<OrdemServico[]>{\n    return this.http\n    .get<OrdemServico[]>(this.baseURL, { headers: this.tokenHeader }).pipe(take(1));\n    //return this.http.get<OrdemServico[]>(this.baseURL);\n  }\n\n  public GetOrdemServicoByUsuario(idUsuario: number): Observable<OrdemServico[]>  {\n    return this.http\n    .get<OrdemServico[]>(`${this.baseURL}/usuario/${idUsuario}`, { headers: this.tokenHeader }).pipe(take(1));\n  }\n\n  public GetOrdemServicoById(id: number): Observable<OrdemServico>{\n    return this.http\n    .get<OrdemServico>(`${this.baseURL}/${id}`, { headers: this.tokenHeader }).pipe(take(1));\n  }\n\n  public PostOrdemServico(ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http\n    .post<OrdemServico>(this.baseURL, ordens, { headers: this.tokenHeader }).pipe(take(1));\n  }\n\n  /*public PutOrdemServico(id: number, ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http\n    .put<OrdemServico>(`${this.baseURL}${id}`,ordens, { headers: this.tokenHeader }).pipe(take(1));\n  }*/\n\n  public PatchOrdemServico(id: number, changes: Partial<OrdemServico>): Observable<any> {\n    return this.http\n    .patch(`${this.baseURL}/Aprovado/${id}`, changes, { headers: this.tokenHeader }).pipe(take(1));\n  }\n\n}"],"mappings":"AAGA,SAAqBA,IAAI,QAAQ,MAAM;AACvC,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,YAAY;EAIvB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM,GAAG,kBAAkB;IACjD,KAAAC,WAAW,GAAuB,IAAI;EAGC;EAEhCC,eAAeA,CAAA;IACpB,OAAO,IAAI,CAACJ,IAAI,CACfK,GAAG,CAAiB,IAAI,CAACJ,OAAO,EAAE;MAAEK,OAAO,EAAE,IAAI,CAACH;IAAW,CAAE,CAAC,CAACI,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/E;EACF;;EAEOY,wBAAwBA,CAACC,SAAiB;IAC/C,OAAO,IAAI,CAACT,IAAI,CACfK,GAAG,CAAiB,GAAG,IAAI,CAACJ,OAAO,YAAYQ,SAAS,EAAE,EAAE;MAAEH,OAAO,EAAE,IAAI,CAACH;IAAW,CAAE,CAAC,CAACI,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3G;EAEOc,mBAAmBA,CAACC,EAAU;IACnC,OAAO,IAAI,CAACX,IAAI,CACfK,GAAG,CAAe,GAAG,IAAI,CAACJ,OAAO,IAAIU,EAAE,EAAE,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACH;IAAW,CAAE,CAAC,CAACI,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1F;EAEOgB,gBAAgBA,CAACC,MAAoB;IAC1C,OAAO,IAAI,CAACb,IAAI,CACfc,IAAI,CAAe,IAAI,CAACb,OAAO,EAAEY,MAAM,EAAE;MAAEP,OAAO,EAAE,IAAI,CAACH;IAAW,CAAE,CAAC,CAACI,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC;EACxF;EAEA;;;;EAKOmB,iBAAiBA,CAACJ,EAAU,EAAEK,OAA8B;IACjE,OAAO,IAAI,CAAChB,IAAI,CACfiB,KAAK,CAAC,GAAG,IAAI,CAAChB,OAAO,aAAaU,EAAE,EAAE,EAAEK,OAAO,EAAE;MAAEV,OAAO,EAAE,IAAI,CAACH;IAAW,CAAE,CAAC,CAACI,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC;EAChG;EAAC,QAAAsB,CAAA,G;qBArCUpB,YAAY,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZzB,YAAY;IAAA0B,OAAA,EAAZ1B,YAAY,CAAA2B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}