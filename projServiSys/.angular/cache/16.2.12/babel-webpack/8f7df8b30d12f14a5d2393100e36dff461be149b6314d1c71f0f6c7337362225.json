{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrdemService {\n  cadastrarOrdem(ordemServico) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(http) {\n    this.http = http;\n    this.baseURL = 'http://localhost:5124/api/OrdemServico';\n  }\n  GetOrdemServico() {\n    return this.http.get(this.baseURL);\n  }\n  GetOrdemServicoByUsuario(idUsuario) {\n    return this.http.get(`${this.baseURL}/usuario/${idUsuario}`);\n  }\n  GetOrdemServicoById(id) {\n    return this.http.get(`${this.baseURL}/${id}`);\n  }\n  postOrdemServico(ordens) {\n    return this.http.post(this.baseURL, ordens);\n  }\n  putOrdemServico(id, ordens) {\n    return this.http.put(`${this.baseURL}${id}`, ordens);\n  }\n  patchOrdemServico(id, changes) {\n    return this.http.patch(`${this.baseURL}/Aprovado/${id}`, changes);\n  }\n  static #_ = this.ɵfac = function OrdemService_Factory(t) {\n    return new (t || OrdemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdemService,\n    factory: OrdemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["OrdemService","cadastrarOrdem","ordemServico","Error","constructor","http","baseURL","GetOrdemServico","get","GetOrdemServicoByUsuario","idUsuario","GetOrdemServicoById","id","postOrdemServico","ordens","post","putOrdemServico","put","patchOrdemServico","changes","patch","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\services\\ordem.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\"\nimport { environment } from 'src/environments/environment';\nimport { User } from '../models/user';\nimport { OrdemServico } from '../models/ordem-servico';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdemService {\n  cadastrarOrdem(ordemServico: any) {\n    throw new Error('Method not implemented.');\n  }\n\n  baseURL = 'http://localhost:5124/api/OrdemServico';\n\n  constructor(private http: HttpClient) {}\n\n  public GetOrdemServico(): Observable<OrdemServico[]>{\n    return this.http.get<OrdemServico[]>(this.baseURL);\n  }\n\n  public GetOrdemServicoByUsuario(idUsuario: number): Observable<OrdemServico[]>  {\n    return this.http.get<OrdemServico[]>(`${this.baseURL}/usuario/${idUsuario}`);\n  }\n\n  public GetOrdemServicoById(id: number): Observable<OrdemServico>{\n    return this.http.get<OrdemServico>(`${this.baseURL}/${id}`);\n  }\n\n  public postOrdemServico(ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http.post<OrdemServico>(this.baseURL, ordens);\n  }\n\n  public putOrdemServico(id: number, ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http.put<OrdemServico>(`${this.baseURL}${id}`,ordens);\n  }\n\n  public patchOrdemServico(id: number, changes: Partial<OrdemServico>): Observable<any> {\n    return this.http.patch(`${this.baseURL}/Aprovado/${id}`, changes);\n  }\n\n}"],"mappings":";;AAUA,OAAM,MAAOA,YAAY;EACvBC,cAAcA,CAACC,YAAiB;IAC9B,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAIAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,OAAO,GAAG,wCAAwC;EAEX;EAEhCC,eAAeA,CAAA;IACpB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAiB,IAAI,CAACF,OAAO,CAAC;EACpD;EAEOG,wBAAwBA,CAACC,SAAiB;IAC/C,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,OAAO,YAAYI,SAAS,EAAE,CAAC;EAC9E;EAEOC,mBAAmBA,CAACC,EAAU;IACnC,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAe,GAAG,IAAI,CAACF,OAAO,IAAIM,EAAE,EAAE,CAAC;EAC7D;EAEOC,gBAAgBA,CAACC,MAAoB;IAC1C,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAe,IAAI,CAACT,OAAO,EAAEQ,MAAM,CAAC;EAC3D;EAEOE,eAAeA,CAACJ,EAAU,EAAEE,MAAoB;IACrD,OAAO,IAAI,CAACT,IAAI,CAACY,GAAG,CAAe,GAAG,IAAI,CAACX,OAAO,GAAGM,EAAE,EAAE,EAACE,MAAM,CAAC;EACnE;EAEOI,iBAAiBA,CAACN,EAAU,EAAEO,OAA8B;IACjE,OAAO,IAAI,CAACd,IAAI,CAACe,KAAK,CAAC,GAAG,IAAI,CAACd,OAAO,aAAaM,EAAE,EAAE,EAAEO,OAAO,CAAC;EACnE;EAAC,QAAAE,CAAA,G;qBA/BUrB,YAAY,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ1B,YAAY;IAAA2B,OAAA,EAAZ3B,YAAY,CAAA4B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}