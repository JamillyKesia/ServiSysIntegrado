{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport let FormNovaOsComponent = class FormNovaOsComponent {\n  constructor(modalSS, ordemService, OrdemServico) {\n    this.modalSS = modalSS;\n    this.ordemService = ordemService;\n    this.OrdemServico = OrdemServico;\n    this.modalSwitch = false;\n    //formulario: any = {};\n    this.id = 0;\n    this.dataOrdemServico = new Date();\n    this.descricaoProblema = '';\n    this.aprovada = false;\n    this.localEquipamento = '';\n    this.tipoEquipamento = '';\n    this.serialEquipamento = '';\n    this.userId = 0;\n    //ordens  : Ordem[] = []\n    this.ordens = new Observable();\n  }\n  ngOnInit() {\n    // executando observable\n    this.modalSS.$modal.subscribe(valor => {\n      this.modalSwitch = valor;\n    });\n  }\n  openModal() {\n    this.modalSwitch = true;\n  }\n  cadastrarOrdem() {\n    /* if(!this.localEquipamento || !this.tipoEquipamento)\n       return;\n           this.OrdemServico.cadastrarOrdem({\n       id: this.id,\n       dataOrdemServico: this.dataOrdemServico,\n       descricaoProblema: this.descricaoProblema,\n       aprovada: this.aprovada,\n       localEquipamento: this.localEquipamento,\n       tipoEquipamento: this.tipoEquipamento,\n       serialEquipamento: this.serialEquipamento,\n       estadoOrdemServico: this.estadoOrdemServico,\n       userId: this.userId,\n       user: this.user })\n     .subscribe(_ => this.obterOrdensCadastradas())\n    }\n         obterOrdensCadastradas(){\n     // Substitua 'this.ordem = response' pela atribuição correta à variável 'ordens$'\n     this.ordens = this.ordemService.obterOrdem();\n    }\n       \n    // openModel(){\n    /* // Verifica se todos os campos obrigatórios foram preenchidos\n     if (this.local.trim() === '' && this.tipo.trim() === '' && this.posicao.trim() === ''\n     && this.serial.trim() === '' &&    this.descricao.trim() === ''){\n       alert(\"Por favor, preencha todos os campos.\"); // Caso contrário, exibe um alerta\n     } else {\n       this.modalSwitch = true; // Abre o modal se todos os campos estiverem preenchidos\n     }*/\n    //}\n    /*\n     modalVisible = false;\n            openModal() {\n       this.modalVisible = true;\n       document.getElementById('myModal')!.style.display = 'block'; // Exibe o modal\n     }\n             closeModal() {\n       this.modalVisible = false;\n       document.getElementById('myModal')!.style.display = 'none'; // Oculta o modal\n     }\n             onSubmit(form: any) {\n       if (form.valid) {\n         this.openModal();\n       }\n     }\n    */\n  }\n};\nFormNovaOsComponent = __decorate([Component({\n  selector: 'app-form-nova-os',\n  templateUrl: './form-nova-os.component.html',\n  styleUrls: ['./form-nova-os.component.scss']\n})], FormNovaOsComponent);","map":{"version":3,"names":["Component","Observable","FormNovaOsComponent","constructor","modalSS","ordemService","OrdemServico","modalSwitch","id","dataOrdemServico","Date","descricaoProblema","aprovada","localEquipamento","tipoEquipamento","serialEquipamento","userId","ordens","ngOnInit","$modal","subscribe","valor","openModal","cadastrarOrdem","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\components\\form-nova-os\\form-nova-os.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SwitchService } from 'src/app/services/switch.service';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { OrdemServico } from 'src/app/models/ordem-servico';\nimport { OrdemService } from 'src/app/services/ordem.service';\nimport { User } from 'src/app/models/user';\nimport { EstadoOrdemServicoEnum } from 'src/app/models/estado-ordem-servico-enum';\nimport { OrdemEquipamento } from 'src/app/models/ordem-equipamento';\nimport { Lancamento } from 'src/app/models/lancamento';\n\n@Component({\n  selector: 'app-form-nova-os',\n  templateUrl: './form-nova-os.component.html',\n  styleUrls: ['./form-nova-os.component.scss']\n})\nexport class FormNovaOsComponent {\n  \n  modalSwitch: boolean = false;\n  //formulario: any = {};\n\n  id: number = 0;\n  dataOrdemServico: Date = new Date();\n  descricaoProblema: string = '';\n  aprovada: boolean = false;\n  localEquipamento: string = '';\n  tipoEquipamento: string = '';\n  serialEquipamento: string = '';\n  estadoOrdemServico: EstadoOrdemServicoEnum | undefined;\n  userId: number = 0;\n  user: User | undefined;\n  ordemEquipamentos?: OrdemEquipamento[];\n  lancamentos?: Lancamento[];\n\n\n  constructor(\n    private modalSS: SwitchService,\n     private ordemService: OrdemService,\n     private OrdemServico: OrdemServico) {\n\n     }\n\n  ngOnInit(){\n    // executando observable\n    this.modalSS.$modal.subscribe((valor) => {this.modalSwitch = valor}); \n  }\n\n  openModal(){\n    this.modalSwitch = true;\n  }\n\n  //ordens  : Ordem[] = []\n  ordens = new Observable<OrdemServico[]>();\n\n\n  cadastrarOrdem(){\n   /* if(!this.localEquipamento || !this.tipoEquipamento)\n      return;\n\n    this.OrdemServico.cadastrarOrdem({ \n      id: this.id,\n      dataOrdemServico: this.dataOrdemServico,\n      descricaoProblema: this.descricaoProblema,\n      aprovada: this.aprovada,\n      localEquipamento: this.localEquipamento,\n      tipoEquipamento: this.tipoEquipamento,\n      serialEquipamento: this.serialEquipamento,\n      estadoOrdemServico: this.estadoOrdemServico,\n      userId: this.userId,\n      user: this.user })\n    .subscribe(_ => this.obterOrdensCadastradas())\n  }\n\n  obterOrdensCadastradas(){ \n    // Substitua 'this.ordem = response' pela atribuição correta à variável 'ordens$'\n    this.ordens = this.ordemService.obterOrdem();\n  }\n\n\n // openModel(){\n   /* // Verifica se todos os campos obrigatórios foram preenchidos\n    if (this.local.trim() === '' && this.tipo.trim() === '' && this.posicao.trim() === '' \n    && this.serial.trim() === '' &&    this.descricao.trim() === ''){\n      alert(\"Por favor, preencha todos os campos.\"); // Caso contrário, exibe um alerta\n    } else {\n      this.modalSwitch = true; // Abre o modal se todos os campos estiverem preenchidos\n    }*/\n  //}\n\n\n  /*\n   modalVisible = false;\n\n   openModal() {\n     this.modalVisible = true;\n     document.getElementById('myModal')!.style.display = 'block'; // Exibe o modal\n   }\n \n   closeModal() {\n     this.modalVisible = false;\n     document.getElementById('myModal')!.style.display = 'none'; // Oculta o modal\n   }\n \n   onSubmit(form: any) {\n     if (form.valid) {\n       this.openModal();\n     }\n   }\n  */\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAASC,UAAU,QAAQ,MAAM;AAa1B,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAmB9BC,YACUC,OAAsB,EACrBC,YAA0B,EAC1BC,YAA0B;IAF3B,KAAAF,OAAO,GAAPA,OAAO;IACN,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IApBvB,KAAAC,WAAW,GAAY,KAAK;IAC5B;IAEA,KAAAC,EAAE,GAAW,CAAC;IACd,KAAAC,gBAAgB,GAAS,IAAIC,IAAI,EAAE;IACnC,KAAAC,iBAAiB,GAAW,EAAE;IAC9B,KAAAC,QAAQ,GAAY,KAAK;IACzB,KAAAC,gBAAgB,GAAW,EAAE;IAC7B,KAAAC,eAAe,GAAW,EAAE;IAC5B,KAAAC,iBAAiB,GAAW,EAAE;IAE9B,KAAAC,MAAM,GAAW,CAAC;IAsBlB;IACA,KAAAC,MAAM,GAAG,IAAIhB,UAAU,EAAkB;EAZtC;EAEHiB,QAAQA,CAAA;IACN;IACA,IAAI,CAACd,OAAO,CAACe,MAAM,CAACC,SAAS,CAAEC,KAAK,IAAI;MAAE,IAAI,CAACd,WAAW,GAAGc,KAAK;IAAA,CAAC,CAAC;EACtE;EAEAC,SAASA,CAAA;IACP,IAAI,CAACf,WAAW,GAAG,IAAI;EACzB;EAMAgB,cAAcA,CAAA;IACb;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BD;IAGA;;;;;;;;;;;;;;;;EAAA;CAmBD;AA7FYrB,mBAAmB,GAAAsB,UAAA,EAL/BxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWzB,mBAAmB,CA6F/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}