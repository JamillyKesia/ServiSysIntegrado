{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrdemService {\n  //tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${JSON.parse(localStorage.getItem('user')).token}`});\n  constructor(http) {\n    this.http = http;\n    this.baseURL = environment.apiURL + 'api/OrdemServico';\n    this.tokenHeader = null;\n  }\n  setTokenHeader() {\n    const user = localStorage.getItem('user');\n    if (user) {\n      try {\n        const parsedUser = JSON.parse(user);\n        if (parsedUser && parsedUser.tokenHeader) {\n          this.tokenHeader = new HttpHeaders({\n            'Authorization': `Bearer ${parsedUser.tokenHeader}`\n          });\n        } else {\n          console.error('Token não encontrado no objeto usuário.');\n        }\n      } catch (e) {\n        console.error('Erro ao analisar o JSON armazenado em localStorage:', e);\n      }\n    } else {\n      console.error('Usuário não encontrado no localStorage.');\n    }\n  }\n  GetOrdemServico() {\n    return this.http.get(this.baseURL, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n    //return this.http.get<OrdemServico[]>(this.baseURL);\n  }\n\n  GetOrdemServicoByUsuario(idUsuario) {\n    return this.http.get(`${this.baseURL}/usuario/${idUsuario}`, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  GetOrdemServicoById(id) {\n    return this.http.get(`${this.baseURL}/${id}`, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  PostOrdemServico(ordens) {\n    return this.http.post(this.baseURL, ordens, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  /*public PutOrdemServico(id: number, ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http\n    .put<OrdemServico>(`${this.baseURL}${id}`,ordens, { headers: this.tokenHeader }).pipe(take(1));\n  }*/\n  PatchOrdemServico(id, changes) {\n    return this.http.patch(`${this.baseURL}/Aprovado/${id}`, changes, {\n      headers: this.tokenHeader\n    }).pipe(take(1));\n  }\n  static #_ = this.ɵfac = function OrdemService_Factory(t) {\n    return new (t || OrdemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdemService,\n    factory: OrdemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","take","environment","OrdemService","constructor","http","baseURL","apiURL","tokenHeader","setTokenHeader","user","localStorage","getItem","parsedUser","JSON","parse","console","error","e","GetOrdemServico","get","headers","pipe","GetOrdemServicoByUsuario","idUsuario","GetOrdemServicoById","id","PostOrdemServico","ordens","post","PatchOrdemServico","changes","patch","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\services\\ordem.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { OrdemServico } from '../models/ordem-servico';\nimport { Observable, take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdemService {\n\n  baseURL = environment.apiURL + 'api/OrdemServico';\n  tokenHeader: HttpHeaders | null = null;\n  //tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${JSON.parse(localStorage.getItem('user')).token}`});\n\n  constructor(private http: HttpClient) {}\n\n  private setTokenHeader(): void {\n    const user = localStorage.getItem('user');\n    if (user) {\n      try {\n        const parsedUser = JSON.parse(user);\n        if (parsedUser && parsedUser.tokenHeader) {\n          this.tokenHeader = new HttpHeaders({ 'Authorization': `Bearer ${parsedUser.tokenHeader}` });\n        } else {\n          console.error('Token não encontrado no objeto usuário.');\n        }\n      } catch (e) {\n        console.error('Erro ao analisar o JSON armazenado em localStorage:', e);\n      }\n    } else {\n      console.error('Usuário não encontrado no localStorage.');\n    }\n  }\n\n  public GetOrdemServico(): Observable<OrdemServico[]>{\n    return this.http\n    .get<OrdemServico[]>(this.baseURL, { headers: this.tokenHeader }).pipe(take(1));\n    //return this.http.get<OrdemServico[]>(this.baseURL);\n  }\n\n  public GetOrdemServicoByUsuario(idUsuario: number): Observable<OrdemServico[]>  {\n    return this.http\n    .get<OrdemServico[]>(`${this.baseURL}/usuario/${idUsuario}`, { headers: this.tokenHeader }).pipe(take(1));\n  }\n\n  public GetOrdemServicoById(id: number): Observable<OrdemServico>{\n    return this.http\n    .get<OrdemServico>(`${this.baseURL}/${id}`, { headers: this.tokenHeader }).pipe(take(1));\n  }\n\n  public PostOrdemServico(ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http\n    .post<OrdemServico>(this.baseURL, ordens, { headers: this.tokenHeader }).pipe(take(1));\n  }\n\n  /*public PutOrdemServico(id: number, ordens: OrdemServico): Observable<OrdemServico>{\n    return this.http\n    .put<OrdemServico>(`${this.baseURL}${id}`,ordens, { headers: this.tokenHeader }).pipe(take(1));\n  }*/\n\n  public PatchOrdemServico(id: number, changes: Partial<OrdemServico>): Observable<any> {\n    return this.http\n    .patch(`${this.baseURL}/Aprovado/${id}`, changes, { headers: this.tokenHeader }).pipe(take(1));\n  }\n\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,IAAI,QAAQ,MAAM;AACvC,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,YAAY;EAIvB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM,GAAG,kBAAkB;IACjD,KAAAC,WAAW,GAAuB,IAAI;EAGC;EAE/BC,cAAcA,CAAA;IACpB,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,IAAIF,IAAI,EAAE;MACR,IAAI;QACF,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;QACnC,IAAIG,UAAU,IAAIA,UAAU,CAACL,WAAW,EAAE;UACxC,IAAI,CAACA,WAAW,GAAG,IAAIR,WAAW,CAAC;YAAE,eAAe,EAAE,UAAUa,UAAU,CAACL,WAAW;UAAE,CAAE,CAAC;SAC5F,MAAM;UACLQ,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC;;OAE3D,CAAC,OAAOC,CAAC,EAAE;QACVF,OAAO,CAACC,KAAK,CAAC,qDAAqD,EAAEC,CAAC,CAAC;;KAE1E,MAAM;MACLF,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC;;EAE5D;EAEOE,eAAeA,CAAA;IACpB,OAAO,IAAI,CAACd,IAAI,CACfe,GAAG,CAAiB,IAAI,CAACd,OAAO,EAAE;MAAEe,OAAO,EAAE,IAAI,CAACb;IAAW,CAAE,CAAC,CAACc,IAAI,CAACrB,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/E;EACF;;EAEOsB,wBAAwBA,CAACC,SAAiB;IAC/C,OAAO,IAAI,CAACnB,IAAI,CACfe,GAAG,CAAiB,GAAG,IAAI,CAACd,OAAO,YAAYkB,SAAS,EAAE,EAAE;MAAEH,OAAO,EAAE,IAAI,CAACb;IAAW,CAAE,CAAC,CAACc,IAAI,CAACrB,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3G;EAEOwB,mBAAmBA,CAACC,EAAU;IACnC,OAAO,IAAI,CAACrB,IAAI,CACfe,GAAG,CAAe,GAAG,IAAI,CAACd,OAAO,IAAIoB,EAAE,EAAE,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACb;IAAW,CAAE,CAAC,CAACc,IAAI,CAACrB,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1F;EAEO0B,gBAAgBA,CAACC,MAAoB;IAC1C,OAAO,IAAI,CAACvB,IAAI,CACfwB,IAAI,CAAe,IAAI,CAACvB,OAAO,EAAEsB,MAAM,EAAE;MAAEP,OAAO,EAAE,IAAI,CAACb;IAAW,CAAE,CAAC,CAACc,IAAI,CAACrB,IAAI,CAAC,CAAC,CAAC,CAAC;EACxF;EAEA;;;;EAKO6B,iBAAiBA,CAACJ,EAAU,EAAEK,OAA8B;IACjE,OAAO,IAAI,CAAC1B,IAAI,CACf2B,KAAK,CAAC,GAAG,IAAI,CAAC1B,OAAO,aAAaoB,EAAE,EAAE,EAAEK,OAAO,EAAE;MAAEV,OAAO,EAAE,IAAI,CAACb;IAAW,CAAE,CAAC,CAACc,IAAI,CAACrB,IAAI,CAAC,CAAC,CAAC,CAAC;EAChG;EAAC,QAAAgC,CAAA,G;qBAvDU9B,YAAY,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZnC,YAAY;IAAAoC,OAAA,EAAZpC,YAAY,CAAAqC,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}