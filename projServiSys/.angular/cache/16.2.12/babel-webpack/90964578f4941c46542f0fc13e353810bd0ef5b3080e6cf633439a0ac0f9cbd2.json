{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SuasOrdensFuncComponent {\n  constructor() {\n    this.botaoSelecionado = 0;\n    this.ordemSelecionada = null;\n    this.ordens = [{\n      id: 'OS4568SA',\n      status: 'Em andamento',\n      data: '14-09-2023'\n    }, {\n      id: 'OS4567SA',\n      status: 'Concluída',\n      data: '11-07-2023'\n    }, {\n      id: 'OS4566SA',\n      status: 'Rejeitado',\n      data: '27-06-2023'\n    }, {\n      id: 'OS4565SA',\n      status: 'Em análise',\n      data: '11-03-2023'\n    }];\n  }\n  selecionarBotao(opcao) {\n    // Limpar a ordem selecionada quando um botão é clicado\n    this.ordemSelecionada = null;\n    // Lógica para selecionar a opção do botão\n    if (opcao === 1) {\n      // Todas as ordens\n      // Por exemplo, atribuir todas as ordens para a variável this.ordens\n      // Supondo que você tenha uma função para obter todas as ordens do serviço\n      this.ordens = this.obterTodasAsOrdens();\n    } else if (opcao === 2) {\n      // Ordens concluídas\n      // Por exemplo, filtrar as ordens concluídas e atribuir à variável this.ordens\n      // Supondo que você tenha uma função para obter as ordens concluídas\n      this.ordens = this.filtrarOrdensConcluidas();\n    } else if (opcao === 3) {\n      // Ordens rejeitadas\n      // Por exemplo, filtrar as ordens rejeitadas e atribuir à variável this.ordens\n      // Supondo que você tenha uma função para obter as ordens rejeitadas\n      this.ordens = this.filtrarOrdensRejeitadas();\n    }\n  }\n  // Exemplo de função para obter todas as ordens de serviço\n  obterTodasAsOrdens() {\n    // Implemente a lógica para obter todas as ordens de serviço\n    // Por exemplo, você pode fazer uma chamada a uma API para obter as ordens\n    // Suponha que ordens seja uma lista de objetos contendo as informações de cada ordem de serviço\n    return this.ordens.filter(ordem => ordem.status === 'Todas as ordens');\n    ;\n  }\n  // Exemplo de função para filtrar as ordens concluídas\n  filtrarOrdensConcluidas() {\n    // Implemente a lógica para filtrar as ordens concluídas\n    // Por exemplo, você pode filtrar a lista de ordens para obter apenas as concluídas\n    // Suponha que ordens seja uma lista de objetos contendo as informações de cada ordem de serviço\n    return this.ordens.filter(ordem => ordem.status === 'Concluída');\n  }\n  // Exemplo de função para filtrar as ordens rejeitadas\n  filtrarOrdensRejeitadas() {\n    // Implemente a lógica para filtrar as ordens rejeitadas\n    // Por exemplo, você pode filtrar a lista de ordens para obter apenas as rejeitadas\n    // Suponha que ordens seja uma lista de objetos contendo as informações de cada ordem de serviço\n    return this.ordens.filter(ordem => ordem.status === 'Rejeitada');\n  }\n  static #_ = this.ɵfac = function SuasOrdensFuncComponent_Factory(t) {\n    return new (t || SuasOrdensFuncComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SuasOrdensFuncComponent,\n    selectors: [[\"app-suas-ordens-func\"]],\n    inputs: {\n      ordens: \"ordens\"\n    },\n    decls: 7,\n    vars: 3,\n    consts: [[1, \"txt-so\"], [3, \"descricao\"]],\n    template: function SuasOrdensFuncComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\");\n        i0.ɵɵtext(2, \"Nessa p\\u00E1gina voc\\u00EA encontra suas requisi\\u00E7\\u00F5es de ordens de servi\\u00E7o\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(3, \"app-botao-filtro\", 1)(4, \"app-botao-filtro\", 1)(5, \"app-botao-filtro\", 1)(6, \"app-tabela-ordens\");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"descricao\", \"Todas as ordens\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"descricao\", \"Conclu\\u00EDdas\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"descricao\", \"Rejeitadas\");\n      }\n    },\n    styles: [\"@import url(https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1[_ngcontent-%COMP%], 9..40[_ngcontent-%COMP%], 100..1000&family=Inter[_ngcontent-%COMP%]:wght@100..900&display=swap);[_nghost-%COMP%]   .txt-so[_ngcontent-%COMP%] {\\n  padding: 8% 50px 40px 50px;\\n  width: 100%;\\n  max-height: 100vh;\\n  overflow-y: scroll;\\n}\\n[_nghost-%COMP%]   .txt-so[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-family: \\\"DM Sans\\\", sans-serif;\\n  font-size: 21px;\\n  font-weight: 500;\\n  line-height: 27px;\\n  letter-spacing: 0em;\\n  text-align: left;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvc3Vhcy1vcmRlbnMtZnVuYy9zdWFzLW9yZGVucy1mdW5jLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtJO0VBQ0ksMEJBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtBQUhSO0FBS1E7RUFDSSxrQ0FBQTtFQUNBLGVBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtBQUhaIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9RE0rU2FuczppdGFsLG9wc3osd2dodEAwLDkuLjQwLDEwMC4uMTAwMDsxLDkuLjQwLDEwMC4uMTAwMCZmYW1pbHk9SW50ZXI6d2dodEAxMDAuLjkwMCZkaXNwbGF5PXN3YXAnKTtcclxuQGltcG9ydCAndmFyaWF2ZWlzLnNjc3MnO1xyXG5cclxuOmhvc3R7XHJcblxyXG4gICAgLnR4dC1zb3tcclxuICAgICAgICBwYWRkaW5nOiA4JSA1MHB4IDQwcHggNTBweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBtYXgtaGVpZ2h0OiAxMDB2aDsgLy9zZSBwYXNzYXIgZGVzc2UgdmFsb3JcclxuICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7IC8vZWxlIGNyaWEgdW0gc2Nyb2xsXHJcblxyXG4gICAgICAgIHB7XHJcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnRE0gU2FucycsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjFweDtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAwZW07XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["SuasOrdensFuncComponent","constructor","botaoSelecionado","ordemSelecionada","ordens","id","status","data","selecionarBotao","opcao","obterTodasAsOrdens","filtrarOrdensConcluidas","filtrarOrdensRejeitadas","filter","ordem","_","_2","selectors","inputs","decls","vars","consts","template","SuasOrdensFuncComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\pages\\suas-ordens-func\\suas-ordens-func.component.ts","C:\\Users\\jamil\\projServiSys\\src\\app\\pages\\suas-ordens-func\\suas-ordens-func.component.html"],"sourcesContent":["import { Component ,Input } from '@angular/core';\nimport { BotaoFiltroComponent } from 'src/app/components/botao-filtro/botao-filtro.component';\n\n@Component({\n  selector: 'app-suas-ordens-func',\n  templateUrl: './suas-ordens-func.component.html',\n  styleUrls: ['./suas-ordens-func.component.scss']\n})\nexport class SuasOrdensFuncComponent {\n\noutraMatrizDeItens: any;\nbotaoSelecionado: number = 0;\n\n  ordemSelecionada: any = null;\n\n  constructor() { }\n\n  @Input() ordens: any[] = [\n    { id: 'OS4568SA', status: 'Em andamento', data: '14-09-2023' },\n    { id: 'OS4567SA', status: 'Concluída', data: '11-07-2023' },\n    { id: 'OS4566SA', status: 'Rejeitado', data: '27-06-2023' },\n    { id: 'OS4565SA', status: 'Em análise', data: '11-03-2023' }\n  ];\n\n  selecionarBotao(opcao: number) {\n    // Limpar a ordem selecionada quando um botão é clicado\n    this.ordemSelecionada = null;\n\n    // Lógica para selecionar a opção do botão\n    if (opcao === 1) {\n      // Todas as ordens\n      // Por exemplo, atribuir todas as ordens para a variável this.ordens\n      // Supondo que você tenha uma função para obter todas as ordens do serviço\n      this.ordens = this.obterTodasAsOrdens();\n    } else if (opcao === 2) {\n      // Ordens concluídas\n      // Por exemplo, filtrar as ordens concluídas e atribuir à variável this.ordens\n      // Supondo que você tenha uma função para obter as ordens concluídas\n      this.ordens = this.filtrarOrdensConcluidas();\n    } else if (opcao === 3) {\n      // Ordens rejeitadas\n      // Por exemplo, filtrar as ordens rejeitadas e atribuir à variável this.ordens\n      // Supondo que você tenha uma função para obter as ordens rejeitadas\n      this.ordens = this.filtrarOrdensRejeitadas();\n    }\n  }\n\n\n  // Exemplo de função para obter todas as ordens de serviço\n  obterTodasAsOrdens(): any[] {\n    // Implemente a lógica para obter todas as ordens de serviço\n    // Por exemplo, você pode fazer uma chamada a uma API para obter as ordens\n    // Suponha que ordens seja uma lista de objetos contendo as informações de cada ordem de serviço\n    return this.ordens.filter(ordem => ordem.status === 'Todas as ordens');;\n  }\n\n  // Exemplo de função para filtrar as ordens concluídas\n  filtrarOrdensConcluidas(): any[] {\n    // Implemente a lógica para filtrar as ordens concluídas\n    // Por exemplo, você pode filtrar a lista de ordens para obter apenas as concluídas\n    // Suponha que ordens seja uma lista de objetos contendo as informações de cada ordem de serviço\n    return this.ordens.filter(ordem => ordem.status === 'Concluída');\n  }\n\n  // Exemplo de função para filtrar as ordens rejeitadas\n  filtrarOrdensRejeitadas(): any[] {\n    // Implemente a lógica para filtrar as ordens rejeitadas\n    // Por exemplo, você pode filtrar a lista de ordens para obter apenas as rejeitadas\n    // Suponha que ordens seja uma lista de objetos contendo as informações de cada ordem de serviço\n    return this.ordens.filter(ordem => ordem.status === 'Rejeitada');\n  }\n  \n\n  \n\n\n}\n","<div class=\"txt-so\">\n    <p>Nessa página você encontra suas requisições de ordens de serviço</p>\n</div>\n<app-botao-filtro  [descricao]=\"'Todas as ordens'\"></app-botao-filtro>\n<app-botao-filtro  [descricao]=\"'Concluídas'\" ></app-botao-filtro>\n<app-botao-filtro  [descricao]=\"'Rejeitadas'\"></app-botao-filtro>\n<app-tabela-ordens></app-tabela-ordens>\n\n"],"mappings":";AAQA,OAAM,MAAOA,uBAAuB;EAOlCC,YAAA;IAJF,KAAAC,gBAAgB,GAAW,CAAC;IAE1B,KAAAC,gBAAgB,GAAQ,IAAI;IAInB,KAAAC,MAAM,GAAU,CACvB;MAAEC,EAAE,EAAE,UAAU;MAAEC,MAAM,EAAE,cAAc;MAAEC,IAAI,EAAE;IAAY,CAAE,EAC9D;MAAEF,EAAE,EAAE,UAAU;MAAEC,MAAM,EAAE,WAAW;MAAEC,IAAI,EAAE;IAAY,CAAE,EAC3D;MAAEF,EAAE,EAAE,UAAU;MAAEC,MAAM,EAAE,WAAW;MAAEC,IAAI,EAAE;IAAY,CAAE,EAC3D;MAAEF,EAAE,EAAE,UAAU;MAAEC,MAAM,EAAE,YAAY;MAAEC,IAAI,EAAE;IAAY,CAAE,CAC7D;EAPe;EAShBC,eAAeA,CAACC,KAAa;IAC3B;IACA,IAAI,CAACN,gBAAgB,GAAG,IAAI;IAE5B;IACA,IAAIM,KAAK,KAAK,CAAC,EAAE;MACf;MACA;MACA;MACA,IAAI,CAACL,MAAM,GAAG,IAAI,CAACM,kBAAkB,EAAE;KACxC,MAAM,IAAID,KAAK,KAAK,CAAC,EAAE;MACtB;MACA;MACA;MACA,IAAI,CAACL,MAAM,GAAG,IAAI,CAACO,uBAAuB,EAAE;KAC7C,MAAM,IAAIF,KAAK,KAAK,CAAC,EAAE;MACtB;MACA;MACA;MACA,IAAI,CAACL,MAAM,GAAG,IAAI,CAACQ,uBAAuB,EAAE;;EAEhD;EAGA;EACAF,kBAAkBA,CAAA;IAChB;IACA;IACA;IACA,OAAO,IAAI,CAACN,MAAM,CAACS,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACR,MAAM,KAAK,iBAAiB,CAAC;IAAC;EACzE;EAEA;EACAK,uBAAuBA,CAAA;IACrB;IACA;IACA;IACA,OAAO,IAAI,CAACP,MAAM,CAACS,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACR,MAAM,KAAK,WAAW,CAAC;EAClE;EAEA;EACAM,uBAAuBA,CAAA;IACrB;IACA;IACA;IACA,OAAO,IAAI,CAACR,MAAM,CAACS,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACR,MAAM,KAAK,WAAW,CAAC;EAClE;EAAC,QAAAS,CAAA,G;qBA9DUf,uBAAuB;EAAA;EAAA,QAAAgB,EAAA,G;UAAvBhB,uBAAuB;IAAAiB,SAAA;IAAAC,MAAA;MAAAd,MAAA;IAAA;IAAAe,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,iCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRpCE,EAAA,CAAAC,cAAA,aAAoB;QACbD,EAAA,CAAAE,MAAA,gGAAgE;QAAAF,EAAA,CAAAG,YAAA,EAAI;QAE3EH,EAAA,CAAAI,SAAA,0BAAsE;;;QAAnDJ,EAAA,CAAAK,SAAA,GAA+B;QAA/BL,EAAA,CAAAM,UAAA,gCAA+B;QAC/BN,EAAA,CAAAK,SAAA,GAA0B;QAA1BL,EAAA,CAAAM,UAAA,gCAA0B;QAC1BN,EAAA,CAAAK,SAAA,GAA0B;QAA1BL,EAAA,CAAAM,UAAA,2BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}