{"ast":null,"code":"\"use strict\";\n\n// import { AbstractControl, FormGroup } from '@angular/forms';\n// export class ValidatorField {\n//     static MustMatch(controlName: string, matchingControlName: string): any{\n//         return (group: AbstractControl) => {\n//             const formGroup = group as FormGroup;\n//             const control = formGroup.controls[controlName];\n//             const matchingControl = formGroup.controls[matchingControlName];\n//             if(matchingControl.errors && !matchingControl.errors.mustMatch){\n//                 return null;\n//             }\n//             if(control.value !== matchingControl.value){\n//                 matchingControl.setErrors({ mustMatch: true });\n//             }\n//             else{\n//                 matchingControl.setErrors(null);\n//             }\n//         }\n//     }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\helpers\\validator-field.ts"],"sourcesContent":["// import { AbstractControl, FormGroup } from '@angular/forms';\n\n// export class ValidatorField {\n//     static MustMatch(controlName: string, matchingControlName: string): any{\n//         return (group: AbstractControl) => {\n//             const formGroup = group as FormGroup;\n//             const control = formGroup.controls[controlName];\n//             const matchingControl = formGroup.controls[matchingControlName];\n        \n//             if(matchingControl.errors && !matchingControl.errors.mustMatch){\n//                 return null;\n//             }\n\n//             if(control.value !== matchingControl.value){\n//                 matchingControl.setErrors({ mustMatch: true });\n//             }\n//             else{\n//                 matchingControl.setErrors(null);\n//             }\n        \n//         }\n//     }\n// }\n"],"mappings":";;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}