{"ast":null,"code":"export const authFuncionarioGuard = (route, state) => {\n  const isLoggedIn = true; /*this.authService.isLoggedIn();*/ // Supondo que o usuário está autenticado\n  const isFuncionario = true; // Supondo que o usuário é um Funcionário\n  if (!isLoggedIn || !isFuncionario) {\n    // Se o usuário não estiver autenticado ou não for Funcionário\n    console.log('Acesso não autorizado para Funcionário');\n    return false; // Impedir o acesso à rota protegida\n  }\n\n  return true; // Permitir o acesso à rota protegida\n};","map":{"version":3,"names":["authFuncionarioGuard","route","state","isLoggedIn","isFuncionario","console","log"],"sources":["C:\\Users\\jamil\\projServiSys\\src\\app\\_guard\\auth-funcionario.guard.ts"],"sourcesContent":["import { CanActivateFn } from '@angular/router';\n\nexport const authFuncionarioGuard: CanActivateFn = (route, state) => {\n  const isLoggedIn = true;/*this.authService.isLoggedIn();*/ // Supondo que o usuário está autenticado\n  const isFuncionario = true; // Supondo que o usuário é um Funcionário\n  if (!isLoggedIn || !isFuncionario) {\n    // Se o usuário não estiver autenticado ou não for Funcionário\n    console.log('Acesso não autorizado para Funcionário');\n    return false; // Impedir o acesso à rota protegida\n  }\n  return true; // Permitir o acesso à rota protegida\n}\n\n\n"],"mappings":"AAEA,OAAO,MAAMA,oBAAoB,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAClE,MAAMC,UAAU,GAAG,IAAI,CAAC,oCAAmC;EAC3D,MAAMC,aAAa,GAAG,IAAI,CAAC,CAAC;EAC5B,IAAI,CAACD,UAAU,IAAI,CAACC,aAAa,EAAE;IACjC;IACAC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrD,OAAO,KAAK,CAAC,CAAC;;;EAEhB,OAAO,IAAI,CAAC,CAAC;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}