{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrdemService {\n  cadastrarOrdem(ordemServico) {\n    throw new Error('Method not implemented.');\n  }\n  // private getOrdem = `${environment.api}/api/OrdemServico`;\n  // private postOrdem = `${environment.api}/api/OrdemServico`;\n  // private getIdOrdem = `${environment.api}/api/OrdemServico/{id}`;\n  // private putOrdem = `${environment.api}/api/OrdemServico/{id}`;\n  // private getUserOrdem = `${environment.api}/api/OrdemServico/usuario/{idUsuario}`;\n  // private patchIdOrdem = `${environment.api}/api/OrdemServico/Aprovado/{id}`;\n  constructor(http) {\n    this.http = http;\n    this.baseURL = 'http://localhost:5124/api/OrdemServico';\n  }\n  GetOrdemServico() {\n    return this.http.get(this.baseURL);\n  }\n  GetOrdemServicoByUsuario(idUsuario) {\n    return this.http.get(`${this.baseURL}/usuario/${idUsuario}`);\n  }\n  post(ordem) {\n    return this.http.get(`${this.baseURL}/${id}`);\n  }\n  static #_ = this.ɵfac = function OrdemService_Factory(t) {\n    return new (t || OrdemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdemService,\n    factory: OrdemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["OrdemService","cadastrarOrdem","ordemServico","Error","constructor","http","baseURL","GetOrdemServico","get","GetOrdemServicoByUsuario","idUsuario","post","ordem","id","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jamil\\SSintegrado\\projServiSys\\src\\app\\services\\ordem.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\"\nimport { environment } from 'src/environments/environment';\nimport { User } from '../models/user';\nimport { OrdemServico } from '../models/ordem-servico';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdemService {\n  cadastrarOrdem(ordemServico: any) {\n    throw new Error('Method not implemented.');\n  }\n\n  baseURL = 'http://localhost:5124/api/OrdemServico';\n\n  // private getOrdem = `${environment.api}/api/OrdemServico`;\n  // private postOrdem = `${environment.api}/api/OrdemServico`;\n  // private getIdOrdem = `${environment.api}/api/OrdemServico/{id}`;\n  // private putOrdem = `${environment.api}/api/OrdemServico/{id}`;\n  // private getUserOrdem = `${environment.api}/api/OrdemServico/usuario/{idUsuario}`;\n  // private patchIdOrdem = `${environment.api}/api/OrdemServico/Aprovado/{id}`;\n\n  constructor(private http: HttpClient) {}\n\n  public GetOrdemServico(): Observable<OrdemServico[]>{\n    return this.http.get<OrdemServico[]>(this.baseURL);\n  }\n\n  GetOrdemServicoByUsuario(idUsuario: number): Observable<OrdemServico[]>  {\n    return this.http.get<OrdemServico[]>(`${this.baseURL}/usuario/${idUsuario}`);\n  }\n\n  public post(ordem: OrdemServico): Observable<OrdemServico>{\n    return this.http.get<OrdemServico>(`${this.baseURL}/${id}`);\n  }\n\n  // public cadastrarOrdem(ordens: OrdemServico){\n  //   return this.http.post<User>(this.postOrdem,ordens);\n  // }\n\n  // atualizarOrdem(ordens: OrdemServico){\n  //   return this.http.put<OrdemServico>(this.putOrdem,ordens);\n  // }\n\n  // //patch\n  // alteraOrdem(ordens: OrdemServico){\n  //  // const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   return this.http.patch<OrdemServico[]>(this.patchIdOrdem, ordens);\n  // }\n\n}\n"],"mappings":";;AAUA,OAAM,MAAOA,YAAY;EACvBC,cAAcA,CAACC,YAAiB;IAC9B,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAIA;EACA;EACA;EACA;EACA;EACA;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATxB,KAAAC,OAAO,GAAG,wCAAwC;EASX;EAEhCC,eAAeA,CAAA;IACpB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAiB,IAAI,CAACF,OAAO,CAAC;EACpD;EAEAG,wBAAwBA,CAACC,SAAiB;IACxC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,OAAO,YAAYI,SAAS,EAAE,CAAC;EAC9E;EAEOC,IAAIA,CAACC,KAAmB;IAC7B,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAe,GAAG,IAAI,CAACF,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC7D;EAAC,QAAAC,CAAA,G;qBA1BUd,YAAY,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZnB,YAAY;IAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}